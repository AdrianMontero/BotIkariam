/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaz;

import Core.Bot;
import Objetos.Ciudad;
import Objetos.Construccion;
import Objetos.Edificio;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

/**
 *
 * @author ADRIAN
 */
public class JPEdificios extends javax.swing.JPanel {

    ArrayList<Construccion> construccionesParamiIsla = new ArrayList();
    Construccion construccionASubir;
    DefaultTableModel model;
    Ciudad gestorCiudades;

    java.util.List<WebElement> listaCiudadesPJ;
    WebDriver driverEdi = JFPrincipal.driverFull;

    /**
     * Creates new form JPEdificios
     */
    public JPEdificios() throws InterruptedException {
        initComponents();
        DefaultTableModel model = (DefaultTableModel) jtaEdificios.getModel();
        model.setRowCount(0); //Limpiamos la tabla de ciudad/edificio
//        WebElement desplegableIslas = driverEdi.findElement(By.id("js_citySelectContainer"));
//        desplegableIslas.click();
//
//        Thread.sleep(100);
//        List<WebElement> islas = driverEdi.findElements(By.className("ownCity"));
//        for (int i = 1; i < islas.size(); i++) {
//            jcbCiudadPEdif.addItem(islas.get(i).getText());
//        }
//        desplegableIslas.click();
        try {
            ArrayList<Ciudad> misCiudades = new ArrayList();
            misCiudades = Ciudad.ListCitiesPlayerBD();
            for(int i = 0; i < misCiudades.size();i++){
                jcbCiudadPEdif.addItem(misCiudades.get(i).getNombreCiu());
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(JPEdificios.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Error al intentar recoger las ciudades");
        }
    }
    
    
    public void actualizarTablaTodos() throws SQLException{
        Bot miBot = new Bot();
        ArrayList<Edificio> misEdificios = new ArrayList();
        model = (DefaultTableModel) jtaEdificios.getModel();
        model.setColumnCount(0); //Limpiamos la tabla
        misEdificios = miBot.getTolodLosEdificios(); //Obtenemos todos los edificios de la BD
        for (Edificio edificio : misEdificios) { //Por cada edificio
            model.addRow(new Object[]{(int) edificio.getIdCiudad(), (String) edificio.getNombreEdificio()}); //Lo agregamos a la caja
        }
        
    }
    
    public void actualizarTablaCiudad(int nCiudad) throws SQLException{
        Bot miBot = new Bot();
        ArrayList<Edificio> misEdificios = new ArrayList();
        model = (DefaultTableModel) jtaEdificios.getModel();
        model.setRowCount(0); //Limpiamos la tabla
        misEdificios = miBot.getEdificiosPorCiudad(nCiudad); //Obtenemos todos los edificios de la BD
        for (Edificio edificio : misEdificios) { //Por cada edificio
            model.addRow(new Object[]{(int) edificio.getIdCiudad(), (String) edificio.getNombreEdificio()}); //Lo agregamos a la caja
        }
        
    }
    

        /**
         * This method is called from within the constructor to initialize the
         * form. WARNING: Do NOT modify this code. The content of this method is
         * always regenerated by the Form Editor.
         */
        @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jcbCiudadPEdif = new javax.swing.JComboBox<>();
        jcbEdificioAddPEdif = new javax.swing.JComboBox<>();
        jcbEdificioElimPEdif = new javax.swing.JComboBox<>();
        jlAnadirEdifPEdif = new javax.swing.JLabel();
        jlEliminarEdificioPEdif = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtaEdificios = new javax.swing.JTable();
        jbtnAddPEdif = new javax.swing.JButton();
        jbtndelPEdif1 = new javax.swing.JButton();

        jcbCiudadPEdif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbCiudadPEdifActionPerformed(evt);
            }
        });

        jcbEdificioAddPEdif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbEdificioAddPEdifActionPerformed(evt);
            }
        });

        jlAnadirEdifPEdif.setText("Añadir Edificio");

        jlEliminarEdificioPEdif.setText("Eliminar Edificio");

        jtaEdificios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Ciudad", "Edificio"
            }
        ));
        jScrollPane1.setViewportView(jtaEdificios);

        jbtnAddPEdif.setText("Añadir");
        jbtnAddPEdif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnAddPEdifActionPerformed(evt);
            }
        });

        jbtndelPEdif1.setText("Eliminar");
        jbtndelPEdif1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtndelPEdif1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jbtnAddPEdif, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jbtndelPEdif1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jcbEdificioAddPEdif, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(jcbEdificioElimPEdif, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jlAnadirEdifPEdif)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jlEliminarEdificioPEdif)
                                .addGap(17, 17, 17))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(189, 189, 189)
                        .addComponent(jcbCiudadPEdif, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(130, 229, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jcbCiudadPEdif, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlEliminarEdificioPEdif, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlAnadirEdifPEdif))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jcbEdificioAddPEdif, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbEdificioElimPEdif, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnAddPEdif)
                    .addComponent(jbtndelPEdif1))
                .addGap(35, 35, 35)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(217, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jcbCiudadPEdifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbCiudadPEdifActionPerformed
        Bot miBot = new Bot();
        ArrayList<Construccion> misConstrucciones = new ArrayList();
        ArrayList<Edificio> misEdificios = new ArrayList();

        //Funcionalidades para la parte de "Añadir"
        try {
            misConstrucciones = miBot.getConstruccionesPorCiudad(jcbCiudadPEdif.getSelectedIndex() + 1); //Guardamos en misConstrucciones Las construcciones seleccionadas
            jcbEdificioAddPEdif.removeAllItems(); //Quitamos las construcciones que pudiesen estar cargadas
            for (int i = 0; i < misConstrucciones.size(); i++) { //Por cada construccion en la isla...
                jcbEdificioAddPEdif.addItem(misConstrucciones.get(i).getNombreConstruccion()); //Añadimos su nombre en el combobox de Añadir
            }
            construccionesParamiIsla = misConstrucciones; //Guardamos en "construccionesParamiIsla" las construcciones seleccionadas para esta isla
        } catch (SQLException ex) {
            Logger.getLogger(JPEdificios.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Funcionalidades para la parte de Eliminar
        try {
            misEdificios = miBot.getEdificiosPorCiudad(jcbCiudadPEdif.getSelectedIndex() + 1);
            jcbEdificioElimPEdif.removeAllItems(); //Borramos los edificios que pudiera haber
            for (int i = 0; i < misEdificios.size(); i++) { //Por cada edificio en la isla...
                jcbEdificioElimPEdif.addItem(misEdificios.get(i).getNombreEdificio()); //Añadimos su nombre en el combobox de Añadir
            }
        } catch (SQLException ex) {
            Logger.getLogger(JPEdificios.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            actualizarTablaCiudad(jcbCiudadPEdif.getSelectedIndex() + 1);
        } catch (SQLException ex) {
            Logger.getLogger(JPEdificios.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jcbCiudadPEdifActionPerformed

    private void jcbEdificioAddPEdifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbEdificioAddPEdifActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbEdificioAddPEdifActionPerformed

    private void jbtnAddPEdifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnAddPEdifActionPerformed
        for (int i = 0; i < construccionesParamiIsla.size(); i++) { //Cuando entre las construcciones para esta isla encontremos la que a seleccionado el usuario
            if (construccionesParamiIsla.get(i).getNombreConstruccion().equals(jcbEdificioAddPEdif.getSelectedItem().toString())) {
                construccionASubir = construccionesParamiIsla.get(i); //La asignamos a construcciones a subir
                break;//salimos del for
            }//Posible error aqui
        }
        //Guardamos la construccion en la tabla de Edificios de la BD (asignada para las construcciones que queremos subir
        Edificio miEdificio = new Edificio(construccionASubir.getNombreConstruccion(), construccionASubir.getIdCiudad(), construccionASubir.getPosIkaCon());
        Bot miBot = new Bot();
        model = (DefaultTableModel) jtaEdificios.getModel();
        model.addRow(new Object[]{(int) construccionASubir.getIdCiudad(), (String) construccionASubir.getNombreConstruccion()});
        
        
        try {
            miBot.setEdificioBD(miEdificio); //Guardamos el edificio en la BD para que se ponga a la cola.
        } catch (SQLException ex) {
            Logger.getLogger(JPEdificios.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        //Funcionalidad para la parte de Eliminar
        ArrayList<Edificio> misEdificios = new ArrayList();
        try {
            misEdificios = miBot.getEdificiosPorCiudad(jcbCiudadPEdif.getSelectedIndex() + 1);
            jcbEdificioElimPEdif.removeAllItems(); //Borramos los edificios que pudiera haber
            for (int i = 0; i < misEdificios.size(); i++) { //Por cada edificio en la isla...
                jcbEdificioElimPEdif.addItem(misEdificios.get(i).getNombreEdificio()); //Añadimos su nombre en el combobox de Añadir
            }
        } catch (SQLException ex) {
            Logger.getLogger(JPEdificios.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jbtnAddPEdifActionPerformed

    private void jbtndelPEdif1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtndelPEdif1ActionPerformed
        Edificio gestorEdificios = new Edificio();
        Bot miBot = new Bot();
        ArrayList<Edificio> misEdificios = new ArrayList();
        try {
            gestorEdificios.eliminarEdificioBD(jcbCiudadPEdif.getSelectedIndex() + 1, jcbEdificioElimPEdif.getSelectedItem().toString()); //Eliminamos el edificio que queremos de la BD
        } catch (SQLException ex) {
            Logger.getLogger(JPEdificios.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Funcionalidades para la parte de Eliminar
        try {
            misEdificios = miBot.getEdificiosPorCiudad(jcbCiudadPEdif.getSelectedIndex() + 1);
            jcbEdificioElimPEdif.removeAllItems(); //Borramos los edificios que pudiera haber
            for (int i = 0; i < misEdificios.size(); i++) { //Por cada edificio en la isla...
                jcbEdificioElimPEdif.addItem(misEdificios.get(i).getNombreEdificio()); //Añadimos su nombre en el combobox de Añadir
            }
        } catch (SQLException ex) {
            Logger.getLogger(JPEdificios.class.getName()).log(Level.SEVERE, null, ex);
        }

        
        try {
            //Actualizamos la tabla
            actualizarTablaCiudad(jcbCiudadPEdif.getSelectedIndex() + 1);
        } catch (SQLException ex) {
            Logger.getLogger(JPEdificios.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jbtndelPEdif1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtnAddPEdif;
    private javax.swing.JButton jbtndelPEdif1;
    private javax.swing.JComboBox<String> jcbCiudadPEdif;
    private javax.swing.JComboBox<String> jcbEdificioAddPEdif;
    private javax.swing.JComboBox<String> jcbEdificioElimPEdif;
    private javax.swing.JLabel jlAnadirEdifPEdif;
    private javax.swing.JLabel jlEliminarEdificioPEdif;
    private javax.swing.JTable jtaEdificios;
    // End of variables declaration//GEN-END:variables
}
